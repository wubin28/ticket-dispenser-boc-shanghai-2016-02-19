{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -ea -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.E...\nTime: 0.012\nThere was 1 failure:\n1) a_new_ticket_should_have_the_given_turn_number(TicketDispenserTest)\njava.lang.IllegalStateException: method getNextTurnNumber() should be called once\n\tat MockTurnNumberSequence.verifyMethodGetNextTurnNumberCalledOnce(MockTurnNumberSequence.java:19)\n\tat TicketDispenserTest.a_new_ticket_should_have_the_given_turn_number(TicketDispenserTest.java:45)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 4,  Failures: 1\n\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","TicketDispenser.java":"public class TicketDispenser {\n    private TurnNumberSequence turnNumberSequence;\n\n    public TicketDispenser() {\n        this(new TurnNumberSequence());\n    }\n\n    public TicketDispenser(TurnNumberSequence turnNumberSequence) {\n        this.turnNumberSequence = turnNumberSequence;\n    }\n\n    public TurnTicket getTurnTicket()\n    {\n        int newTurnNumber = turnNumberSequence.getNextTurnNumber();\n        TurnTicket newTurnTicket = new TurnTicket(newTurnNumber);\n\n        return newTurnTicket;\n    }\n}","TurnNumberSequence.java":"public class TurnNumberSequence {\n    private int turnNumber = 0;\n\n    public int getNextTurnNumber()\n    {\n        return turnNumber++;\n    }\n}\n","TurnTicket.java":"public class TurnTicket {\n    private final int turnNumber;\n\n    public TurnTicket(int turnNumber)\n    {\n        this.turnNumber = turnNumber;\n    }\n\n    public int getTurnNumber()\n    {\n        return turnNumber;\n    }\n}","TicketDispenserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class TicketDispenserTest {\n\n    @Test\n    public void should() {\n        assertEquals(1, 1);\n    }\n\n    @Test\n    public void a_new_ticket_should_have_turn_number_subsequent_to_previous_one() {\n        TicketDispenser ticketDispenser = new TicketDispenser();\n\n        int previousTicketTurnNumber = ticketDispenser.getTurnTicket().getTurnNumber();     \n        int ticketTurnNumber = ticketDispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1, ticketTurnNumber - previousTicketTurnNumber);\n    }\n\n    @Test\n    public void a_new_ticket_from_another_ticket_dispenser_should_have_turn_number_subsequent_to_previous_one(){\n        TurnNumberSequence sequence = new TurnNumberSequence();\n        TicketDispenser ticketDispenser = new TicketDispenser(sequence);\n        TicketDispenser anotherTicketDispenser = new TicketDispenser(sequence);\n\n        int turnNumberOfPreviousTicketFromDispenser = \n            ticketDispenser.getTurnTicket().getTurnNumber();\n        int turnNumberOfTicketFromAnotherDispenser = \n            anotherTicketDispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1, turnNumberOfTicketFromAnotherDispenser - \n            turnNumberOfPreviousTicketFromDispenser);       \n    }\n\n    @Test\n    public void a_new_ticket_should_have_the_given_turn_number(){\n        MockTurnNumberSequence mockSequence = new MockTurnNumberSequence();\n        mockSequence.arrangeNextTurnNumber(59);\n        TicketDispenser dispenser = new TicketDispenser(mockSequence);\n\n        int turnNumber = dispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(59, turnNumber); \n        mockSequence.verifyMethodGetNextTurnNumberCalledOnce();\n    }\n\n    //TODO vip_ticket_turn_numbers_should_begin_from_1001\n    //TODO normal_ticket_turn_numbers_should_begin_from_2001\n\n}","MockTurnNumberSequence.java":"public class MockTurnNumberSequence extends TurnNumberSequence {\n    private int nextTurnNumber;\n    private int count;\n\n    public void arrangeNextTurnNumber(int nextTurnNumber) {\n        this.nextTurnNumber = nextTurnNumber;\n        this.count = 2;\n    }\n\n    @Override\n    public int getNextTurnNumber()\n    {\n        count++;\n        return nextTurnNumber;\n    }\n    \n    public void verifyMethodGetNextTurnNumberCalledOnce() {\n        if(count != 1) {\n            throw new IllegalStateException(\"method getNextTurnNumber() should be called once\");\n        }\n    }\n}"}