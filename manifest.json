{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"TicketDispenserTest.java:23: error: cannot find symbol\n        int previousTicketFromDispenser =ticketDispenser.getTurnTicket().getTurnNumber();\n                                         ^\n  symbol:   variable ticketDispenser\n  location: class TicketDispenserTest\nTicketDispenserTest.java:24: error: cannot find symbol\n        int ticketFromAnotherDispenser =anotherTicketDispenser.getTurnTicket().getTurnNumber();\n                                        ^\n  symbol:   variable anotherTicketDispenser\n  location: class TicketDispenserTest\n2 errors\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","TicketDispenser.java":"public class TicketDispenser {\n    public TurnTicket getTurnTicket()\n    {\n        int newTurnNumber = TurnNumberSequence.getNextTurnNumber();\n        TurnTicket newTurnTicket = new TurnTicket(newTurnNumber);\n\n        return newTurnTicket;\n    }\n}","TurnNumberSequence.java":"public class TurnNumberSequence {\n    private static int turnNumber = 0;\n\n    public static int getNextTurnNumber()\n    {\n        return turnNumber++;\n    }\n}\n","TurnTicket.java":"public class TurnTicket {\n    private final int turnNumber;\n\n    public TurnTicket(int turnNumber)\n    {\n        this.turnNumber = turnNumber;\n    }\n\n    public int getTurnNumber()\n    {\n        return turnNumber;\n    }\n}","TicketDispenserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class TicketDispenserTest {\n\n    @Test\n    public void should() {\n        assertEquals(1, 1);\n    }\n\n    @Test\n    public void a_new_ticket_should_have_turn_number_subsequent_to_previous_one() {\n        TicketDispenser ticketDispenser = new TicketDispenser();\n\n        int previousTicketTurnNumber = ticketDispenser.getTurnTicket().getTurnNumber();     \n        int ticketTurnNumber = ticketDispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1, ticketTurnNumber - previousTicketTurnNumber);\n    }\n\n    @Test\n    public void a_new_ticket_from_another_ticket_dispenser_should_have_turn_number_subsequent_to_previous_one(){\n        int previousTicketFromDispenser =ticketDispenser.getTurnTicket().getTurnNumber();\n        int ticketFromAnotherDispenser =anotherTicketDispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1,ticketFromAnotherDispenser-previousTicketFromDispenser);       \n    }\n    //TODO a_new_ticket_from_another_ticket_dispenser_should_have_turn_number_subsequent_to_previous_one\n    //TODO a_new_ticket_should_have_the_given_turn_number\n\n    //TODO vip_ticket_turn_numbers_should_begin_from_1001\n    //TODO normal_ticket_turn_numbers_should_begin_from_2001\n\n}"}