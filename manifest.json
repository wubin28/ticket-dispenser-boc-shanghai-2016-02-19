{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /mockito/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -ea -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n......\nTime: 0.161\n\nOK (6 tests)\n\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","TicketDispenser.java":"public class TicketDispenser {\n    private TurnNumberSequence turnNumberSequence;\n\n    public TicketDispenser() {\n        this(new TurnNumberSequence());\n    }\n\n    public TicketDispenser(TurnNumberSequence turnNumberSequence) {\n        this.turnNumberSequence = turnNumberSequence;\n    }\n\n    public TurnTicket getTurnTicket()\n    {\n        int newTurnNumber = turnNumberSequence.getNextTurnNumber();\n        TurnTicket newTurnTicket = new TurnTicket(newTurnNumber);\n\n        return newTurnTicket;\n    }\n}","TurnNumberSequence.java":"public class TurnNumberSequence {\n    private int turnNumber = 0;\n    \n    public TurnNumberSequence() {\n        this(0);\n    }\n\n    public TurnNumberSequence(int nextTurnNumber) {\n        this.turnNumber = nextTurnNumber;\n    }\n\n    public int getNextTurnNumber()\n    {\n        return turnNumber++;\n    }\n}","TurnTicket.java":"public class TurnTicket {\n    private final int turnNumber;\n\n    public TurnTicket(int turnNumber)\n    {\n        this.turnNumber = turnNumber;\n    }\n\n    public int getTurnNumber()\n    {\n        return turnNumber;\n    }\n}","TicketDispenserTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class TicketDispenserTest {\n\n    @Test\n    public void should() {\n        assertEquals(1, 1);\n    }\n\n    @Test\n    public void a_new_ticket_should_have_turn_number_subsequent_to_previous_one() {\n        TicketDispenser ticketDispenser = new TicketDispenser();\n\n        int previousTicketTurnNumber = ticketDispenser.getTurnTicket().getTurnNumber();     \n        int ticketTurnNumber = ticketDispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1, ticketTurnNumber - previousTicketTurnNumber);\n    }\n\n    @Test\n    public void a_new_ticket_from_another_ticket_dispenser_should_have_turn_number_subsequent_to_previous_one(){\n        TurnNumberSequence sequence = new TurnNumberSequence();\n        TicketDispenser ticketDispenser = new TicketDispenser(sequence);\n        TicketDispenser anotherTicketDispenser = new TicketDispenser(sequence);\n\n        int turnNumberOfPreviousTicketFromDispenser = \n            ticketDispenser.getTurnTicket().getTurnNumber();\n        int turnNumberOfTicketFromAnotherDispenser = \n            anotherTicketDispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1, turnNumberOfTicketFromAnotherDispenser - \n            turnNumberOfPreviousTicketFromDispenser);       \n    }\n\n    @Test\n    public void a_new_ticket_should_have_the_given_turn_number(){\n        MockTurnNumberSequence mockSequence = new MockTurnNumberSequence();\n        mockSequence.arrangeNextTurnNumber(59);\n        TicketDispenser dispenser = new TicketDispenser(mockSequence);\n\n        int turnNumber = dispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(59, turnNumber); \n        mockSequence.verifyMethodGetNextTurnNumberCalledOnce();\n    }\n\n    @Test\n    public void a_new_ticket_should_have_the_given_turn_number_using_mockito(){\n        TurnNumberSequence mockSequence = mock(TurnNumberSequence.class);\n        when(mockSequence.getNextTurnNumber()).thenReturn(59);\n        TicketDispenser dispenser = new TicketDispenser(mockSequence);\n\n        int turnNumber = dispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(59, turnNumber); \n        verify(mockSequence).getNextTurnNumber();\n    }\n    @Test\n    public void vip_ticket_turn_numbers_should_begin_from_1001() {\n        TurnNumberSequence turnNumberSequence = new TurnNumberSequence(1001);\n        TicketDispenser vipTicketDispenser = new TicketDispenser(turnNumberSequence);    \n\n        int firstVipTicketTurnNumber = vipTicketDispenser.getTurnTicket().getTurnNumber();\n\n        assertEquals(1001,firstVipTicketTurnNumber);\n    }\n\n    //TODO normal_ticket_turn_numbers_should_begin_from_2001\n\n}","MockTurnNumberSequence.java":"public class MockTurnNumberSequence extends TurnNumberSequence {\n    private int nextTurnNumber;\n    private int count;\n\n    public void arrangeNextTurnNumber(int nextTurnNumber) {\n        this.nextTurnNumber = nextTurnNumber;\n        this.count = 0;\n    }\n\n    @Override\n    public int getNextTurnNumber()\n    {\n        count++;\n        return nextTurnNumber;\n    }\n    \n    public void verifyMethodGetNextTurnNumberCalledOnce() {\n        if(count != 1) {\n            throw new IllegalStateException(\"method getNextTurnNumber() should be called once\");\n        }\n    }\n}"}